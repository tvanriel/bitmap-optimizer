package optimizer

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"image"
	"image/color"
	"io"
	"strconv"
	"strings"
)

func Optimize(img image.Image, out io.Writer, packagename string) error {
	pixels := make(map[string][]image.Point)

	width := img.Bounds().Max.X
	height := img.Bounds().Max.Y
	for y := range height {
		for x := range width {
			colorname := toHex(img.At(x, y))
			pixels[colorname] = append(pixels[colorname], image.Point{X: x, Y: y})
		}
	}

	i := 0
	_, err := out.Write([]byte("// AUTOGENERATED FILE - DO NOT EDIT\n"))
	if err != nil {
		return fmt.Errorf("optimize: %w", err)
	}
	_, err = out.Write([]byte("package "))
	if err != nil {
		return fmt.Errorf("optimize: %w", err)
	}
	_, err = out.Write([]byte(packagename))
	if err != nil {
		return fmt.Errorf("optimize: %w", err)
	}
	_, err = out.Write([]byte("\n"))
	if err != nil {
		return fmt.Errorf("optimize: %w", err)
	}

	var mapbuf bytes.Buffer

	mapbuf.Write([]byte("var Colors = map[string]*[]uint32{\n"))

	for name := range pixels {
		i++
		err := printcolours(i, name, pixels[name], out)
		if err != nil {
			return fmt.Errorf("optimize: %w", err)
		}
		_, err = fmt.Fprintf(&mapbuf, "\t\"#%s\": &Colour%d,\n", name, i)
		if err != nil {
			return fmt.Errorf("optimize: %w", err)
		}
	}

	mapbuf.Write([]byte("}\n"))
	_, err = io.Copy(out, &mapbuf)
	if err != nil {
		return fmt.Errorf("optimize: %w", err)
	}
	err = writeHelperFuncs(out)
	if err != nil {
		return fmt.Errorf("optimize: %w", err)
	}
	return nil
}

func toHex(c color.Color) string {
	r, g, b, _ := c.RGBA()

	return hex.EncodeToString([]byte{byte(r), byte(g), byte(b)})
}

func printcolours(i int, colour string, points []image.Point, out io.Writer) error {
	s := make([]string, len(points))
	for p := range points {
		s[p] = strconv.Itoa((points[p].X<<16 + points[p].Y))
	}

	_, err := fmt.Fprintf(out, "// colour #%s\nvar Colour%d = []uint32{%s}\n", colour, i, strings.Join(s, ", "))
	if err != nil {
    return fmt.Errorf("printcolours: %w", err)
  } 
  return nil
}

func writeHelperFuncs(out io.Writer) error {
	s := `func Point(i uint32) (X int, Y int) {
  return int(i>>16), int(i&0xFF)
}`
	_, err := fmt.Fprintln(out, s)
	if err != nil {
    return fmt.Errorf("writeHelperFuncs: %w", err)
  }
  return nil
}
